#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorldBank
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GLOBALEDGE_MVC")]
	public partial class WorldBankDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDIBS_Availability(DIBS_Availability instance);
    partial void UpdateDIBS_Availability(DIBS_Availability instance);
    partial void DeleteDIBS_Availability(DIBS_Availability instance);
    partial void InsertDIBS_Category(DIBS_Category instance);
    partial void UpdateDIBS_Category(DIBS_Category instance);
    partial void DeleteDIBS_Category(DIBS_Category instance);
    partial void InsertDIBS_Source(DIBS_Source instance);
    partial void UpdateDIBS_Source(DIBS_Source instance);
    partial void DeleteDIBS_Source(DIBS_Source instance);
    partial void InsertDIBS_Unit(DIBS_Unit instance);
    partial void UpdateDIBS_Unit(DIBS_Unit instance);
    partial void DeleteDIBS_Unit(DIBS_Unit instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertDIBS_Field(DIBS_Field instance);
    partial void UpdateDIBS_Field(DIBS_Field instance);
    partial void DeleteDIBS_Field(DIBS_Field instance);
    partial void InsertDIBS_FieldsAvailability(DIBS_FieldsAvailability instance);
    partial void UpdateDIBS_FieldsAvailability(DIBS_FieldsAvailability instance);
    partial void DeleteDIBS_FieldsAvailability(DIBS_FieldsAvailability instance);
    #endregion
		
		public WorldBankDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GLOBALEDGE_MVCConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WorldBankDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorldBankDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorldBankDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorldBankDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DIBS_Availability> DIBS_Availabilities
		{
			get
			{
				return this.GetTable<DIBS_Availability>();
			}
		}
		
		public System.Data.Linq.Table<DIBS_Category> DIBS_Categories
		{
			get
			{
				return this.GetTable<DIBS_Category>();
			}
		}
		
		public System.Data.Linq.Table<DIBS_Source> DIBS_Sources
		{
			get
			{
				return this.GetTable<DIBS_Source>();
			}
		}
		
		public System.Data.Linq.Table<DIBS_Unit> DIBS_Units
		{
			get
			{
				return this.GetTable<DIBS_Unit>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<DIBS_Field> DIBS_Fields
		{
			get
			{
				return this.GetTable<DIBS_Field>();
			}
		}
		
		public System.Data.Linq.Table<DIBS_FieldsAvailability> DIBS_FieldsAvailabilities
		{
			get
			{
				return this.GetTable<DIBS_FieldsAvailability>();
			}
		}
		
		public System.Data.Linq.Table<DIBS_Data> DIBS_Datas
		{
			get
			{
				return this.GetTable<DIBS_Data>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIBS_Availabilities")]
	public partial class DIBS_Availability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AvailabilityID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<DIBS_FieldsAvailability> _DIBS_FieldsAvailabilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAvailabilityIDChanging(int value);
    partial void OnAvailabilityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DIBS_Availability()
		{
			this._DIBS_FieldsAvailabilities = new EntitySet<DIBS_FieldsAvailability>(new Action<DIBS_FieldsAvailability>(this.attach_DIBS_FieldsAvailabilities), new Action<DIBS_FieldsAvailability>(this.detach_DIBS_FieldsAvailabilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailabilityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AvailabilityID
		{
			get
			{
				return this._AvailabilityID;
			}
			set
			{
				if ((this._AvailabilityID != value))
				{
					this.OnAvailabilityIDChanging(value);
					this.SendPropertyChanging();
					this._AvailabilityID = value;
					this.SendPropertyChanged("AvailabilityID");
					this.OnAvailabilityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Availability_DIBS_FieldsAvailability", Storage="_DIBS_FieldsAvailabilities", ThisKey="AvailabilityID", OtherKey="AvailabilityID")]
		public EntitySet<DIBS_FieldsAvailability> DIBS_FieldsAvailabilities
		{
			get
			{
				return this._DIBS_FieldsAvailabilities;
			}
			set
			{
				this._DIBS_FieldsAvailabilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIBS_FieldsAvailabilities(DIBS_FieldsAvailability entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Availability = this;
		}
		
		private void detach_DIBS_FieldsAvailabilities(DIBS_FieldsAvailability entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Availability = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIBS_Categories")]
	public partial class DIBS_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _Title;
		
		private string _Description;
		
		private EntitySet<DIBS_Field> _DIBS_Fields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DIBS_Category()
		{
			this._DIBS_Fields = new EntitySet<DIBS_Field>(new Action<DIBS_Field>(this.attach_DIBS_Fields), new Action<DIBS_Field>(this.detach_DIBS_Fields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Category_DIBS_Field", Storage="_DIBS_Fields", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<DIBS_Field> DIBS_Fields
		{
			get
			{
				return this._DIBS_Fields;
			}
			set
			{
				this._DIBS_Fields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIBS_Fields(DIBS_Field entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Category = this;
		}
		
		private void detach_DIBS_Fields(DIBS_Field entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIBS_Sources")]
	public partial class DIBS_Source : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SourceID;
		
		private string _Name;
		
		private string _URL;
		
		private EntitySet<DIBS_Field> _DIBS_Fields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSourceIDChanging(int value);
    partial void OnSourceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    #endregion
		
		public DIBS_Source()
		{
			this._DIBS_Fields = new EntitySet<DIBS_Field>(new Action<DIBS_Field>(this.attach_DIBS_Fields), new Action<DIBS_Field>(this.detach_DIBS_Fields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Source_DIBS_Field", Storage="_DIBS_Fields", ThisKey="SourceID", OtherKey="SourceID")]
		public EntitySet<DIBS_Field> DIBS_Fields
		{
			get
			{
				return this._DIBS_Fields;
			}
			set
			{
				this._DIBS_Fields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIBS_Fields(DIBS_Field entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Source = this;
		}
		
		private void detach_DIBS_Fields(DIBS_Field entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Source = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIBS_Units")]
	public partial class DIBS_Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitID;
		
		private string _Unit;
		
		private string _Description;
		
		private EntitySet<DIBS_Field> _DIBS_Fields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DIBS_Unit()
		{
			this._DIBS_Fields = new EntitySet<DIBS_Field>(new Action<DIBS_Field>(this.attach_DIBS_Fields), new Action<DIBS_Field>(this.detach_DIBS_Fields));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Unit_DIBS_Field", Storage="_DIBS_Fields", ThisKey="UnitID", OtherKey="UnitID")]
		public EntitySet<DIBS_Field> DIBS_Fields
		{
			get
			{
				return this._DIBS_Fields;
			}
			set
			{
				this._DIBS_Fields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIBS_Fields(DIBS_Field entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Unit = this;
		}
		
		private void detach_DIBS_Fields(DIBS_Field entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Unit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagID;
		
		private string _Title;
		
		private string _Description;
		
		private EntitySet<Country> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Tag()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Country", Storage="_Countries", ThisKey="TagID", OtherKey="TagID")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private int _TagID;
		
		private int _StatusID;
		
		private string _Abbr;
		
		private string _NameCIA;
		
		private string _IntroShort;
		
		private string _IntroLong;
		
		private string _People;
		
		private string _Economy;
		
		private string _Government;
		
		private string _Capital;
		
		private string _Currency;
		
		private string _CurrencyCode;
		
		private string _CallingCode;
		
		private string _Voltage;
		
		private string _ChiefOfState;
		
		private string _HeadOfGov;
		
		private string _USEmbassy;
		
		private string _googleLocation;
		
		private System.Nullable<int> _Zoom;
		
		private string _MainLanguages;
		
		private string _MainReligions;
		
		private string _FlagURL;
		
		private string _MapURL;
		
		private string _MainCities;
		
		private string _StockExchanges;
		
		private string _MajorIndustries;
		
		private string _FusionMapsID;
		
		private string _iso2code;
		
		private System.Nullable<System.DateTime> _LastReviewed;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnAbbrChanging(string value);
    partial void OnAbbrChanged();
    partial void OnNameCIAChanging(string value);
    partial void OnNameCIAChanged();
    partial void OnIntroShortChanging(string value);
    partial void OnIntroShortChanged();
    partial void OnIntroLongChanging(string value);
    partial void OnIntroLongChanged();
    partial void OnPeopleChanging(string value);
    partial void OnPeopleChanged();
    partial void OnEconomyChanging(string value);
    partial void OnEconomyChanged();
    partial void OnGovernmentChanging(string value);
    partial void OnGovernmentChanged();
    partial void OnCapitalChanging(string value);
    partial void OnCapitalChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnCurrencyCodeChanging(string value);
    partial void OnCurrencyCodeChanged();
    partial void OnCallingCodeChanging(string value);
    partial void OnCallingCodeChanged();
    partial void OnVoltageChanging(string value);
    partial void OnVoltageChanged();
    partial void OnChiefOfStateChanging(string value);
    partial void OnChiefOfStateChanged();
    partial void OnHeadOfGovChanging(string value);
    partial void OnHeadOfGovChanged();
    partial void OnUSEmbassyChanging(string value);
    partial void OnUSEmbassyChanged();
    partial void OngoogleLocationChanging(string value);
    partial void OngoogleLocationChanged();
    partial void OnZoomChanging(System.Nullable<int> value);
    partial void OnZoomChanged();
    partial void OnMainLanguagesChanging(string value);
    partial void OnMainLanguagesChanged();
    partial void OnMainReligionsChanging(string value);
    partial void OnMainReligionsChanged();
    partial void OnFlagURLChanging(string value);
    partial void OnFlagURLChanged();
    partial void OnMapURLChanging(string value);
    partial void OnMapURLChanged();
    partial void OnMainCitiesChanging(string value);
    partial void OnMainCitiesChanged();
    partial void OnStockExchangesChanging(string value);
    partial void OnStockExchangesChanged();
    partial void OnMajorIndustriesChanging(string value);
    partial void OnMajorIndustriesChanged();
    partial void OnFusionMapsIDChanging(string value);
    partial void OnFusionMapsIDChanged();
    partial void Oniso2codeChanging(string value);
    partial void Oniso2codeChanged();
    partial void OnLastReviewedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastReviewedChanged();
    #endregion
		
		public Country()
		{
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL")]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbr", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Abbr
		{
			get
			{
				return this._Abbr;
			}
			set
			{
				if ((this._Abbr != value))
				{
					this.OnAbbrChanging(value);
					this.SendPropertyChanging();
					this._Abbr = value;
					this.SendPropertyChanged("Abbr");
					this.OnAbbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCIA", DbType="VarChar(75) NOT NULL", CanBeNull=false)]
		public string NameCIA
		{
			get
			{
				return this._NameCIA;
			}
			set
			{
				if ((this._NameCIA != value))
				{
					this.OnNameCIAChanging(value);
					this.SendPropertyChanging();
					this._NameCIA = value;
					this.SendPropertyChanged("NameCIA");
					this.OnNameCIAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntroShort", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string IntroShort
		{
			get
			{
				return this._IntroShort;
			}
			set
			{
				if ((this._IntroShort != value))
				{
					this.OnIntroShortChanging(value);
					this.SendPropertyChanging();
					this._IntroShort = value;
					this.SendPropertyChanged("IntroShort");
					this.OnIntroShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntroLong", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string IntroLong
		{
			get
			{
				return this._IntroLong;
			}
			set
			{
				if ((this._IntroLong != value))
				{
					this.OnIntroLongChanging(value);
					this.SendPropertyChanging();
					this._IntroLong = value;
					this.SendPropertyChanged("IntroLong");
					this.OnIntroLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_People", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string People
		{
			get
			{
				return this._People;
			}
			set
			{
				if ((this._People != value))
				{
					this.OnPeopleChanging(value);
					this.SendPropertyChanging();
					this._People = value;
					this.SendPropertyChanged("People");
					this.OnPeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Economy", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Economy
		{
			get
			{
				return this._Economy;
			}
			set
			{
				if ((this._Economy != value))
				{
					this.OnEconomyChanging(value);
					this.SendPropertyChanging();
					this._Economy = value;
					this.SendPropertyChanged("Economy");
					this.OnEconomyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Government", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Government
		{
			get
			{
				return this._Government;
			}
			set
			{
				if ((this._Government != value))
				{
					this.OnGovernmentChanging(value);
					this.SendPropertyChanging();
					this._Government = value;
					this.SendPropertyChanged("Government");
					this.OnGovernmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capital", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Capital
		{
			get
			{
				return this._Capital;
			}
			set
			{
				if ((this._Capital != value))
				{
					this.OnCapitalChanging(value);
					this.SendPropertyChanging();
					this._Capital = value;
					this.SendPropertyChanged("Capital");
					this.OnCapitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyCode", DbType="VarChar(10)")]
		public string CurrencyCode
		{
			get
			{
				return this._CurrencyCode;
			}
			set
			{
				if ((this._CurrencyCode != value))
				{
					this.OnCurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._CurrencyCode = value;
					this.SendPropertyChanged("CurrencyCode");
					this.OnCurrencyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallingCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CallingCode
		{
			get
			{
				return this._CallingCode;
			}
			set
			{
				if ((this._CallingCode != value))
				{
					this.OnCallingCodeChanging(value);
					this.SendPropertyChanging();
					this._CallingCode = value;
					this.SendPropertyChanged("CallingCode");
					this.OnCallingCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Voltage", DbType="VarChar(20)")]
		public string Voltage
		{
			get
			{
				return this._Voltage;
			}
			set
			{
				if ((this._Voltage != value))
				{
					this.OnVoltageChanging(value);
					this.SendPropertyChanging();
					this._Voltage = value;
					this.SendPropertyChanged("Voltage");
					this.OnVoltageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChiefOfState", DbType="VarChar(400)")]
		public string ChiefOfState
		{
			get
			{
				return this._ChiefOfState;
			}
			set
			{
				if ((this._ChiefOfState != value))
				{
					this.OnChiefOfStateChanging(value);
					this.SendPropertyChanging();
					this._ChiefOfState = value;
					this.SendPropertyChanged("ChiefOfState");
					this.OnChiefOfStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadOfGov", DbType="VarChar(400)")]
		public string HeadOfGov
		{
			get
			{
				return this._HeadOfGov;
			}
			set
			{
				if ((this._HeadOfGov != value))
				{
					this.OnHeadOfGovChanging(value);
					this.SendPropertyChanging();
					this._HeadOfGov = value;
					this.SendPropertyChanged("HeadOfGov");
					this.OnHeadOfGovChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USEmbassy", DbType="VarChar(1000)")]
		public string USEmbassy
		{
			get
			{
				return this._USEmbassy;
			}
			set
			{
				if ((this._USEmbassy != value))
				{
					this.OnUSEmbassyChanging(value);
					this.SendPropertyChanging();
					this._USEmbassy = value;
					this.SendPropertyChanged("USEmbassy");
					this.OnUSEmbassyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_googleLocation", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string googleLocation
		{
			get
			{
				return this._googleLocation;
			}
			set
			{
				if ((this._googleLocation != value))
				{
					this.OngoogleLocationChanging(value);
					this.SendPropertyChanging();
					this._googleLocation = value;
					this.SendPropertyChanged("googleLocation");
					this.OngoogleLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zoom", DbType="Int")]
		public System.Nullable<int> Zoom
		{
			get
			{
				return this._Zoom;
			}
			set
			{
				if ((this._Zoom != value))
				{
					this.OnZoomChanging(value);
					this.SendPropertyChanging();
					this._Zoom = value;
					this.SendPropertyChanged("Zoom");
					this.OnZoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainLanguages", DbType="VarChar(1000)")]
		public string MainLanguages
		{
			get
			{
				return this._MainLanguages;
			}
			set
			{
				if ((this._MainLanguages != value))
				{
					this.OnMainLanguagesChanging(value);
					this.SendPropertyChanging();
					this._MainLanguages = value;
					this.SendPropertyChanged("MainLanguages");
					this.OnMainLanguagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainReligions", DbType="VarChar(1000)")]
		public string MainReligions
		{
			get
			{
				return this._MainReligions;
			}
			set
			{
				if ((this._MainReligions != value))
				{
					this.OnMainReligionsChanging(value);
					this.SendPropertyChanging();
					this._MainReligions = value;
					this.SendPropertyChanged("MainReligions");
					this.OnMainReligionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlagURL", DbType="VarChar(100)")]
		public string FlagURL
		{
			get
			{
				return this._FlagURL;
			}
			set
			{
				if ((this._FlagURL != value))
				{
					this.OnFlagURLChanging(value);
					this.SendPropertyChanging();
					this._FlagURL = value;
					this.SendPropertyChanged("FlagURL");
					this.OnFlagURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapURL", DbType="VarChar(100)")]
		public string MapURL
		{
			get
			{
				return this._MapURL;
			}
			set
			{
				if ((this._MapURL != value))
				{
					this.OnMapURLChanging(value);
					this.SendPropertyChanging();
					this._MapURL = value;
					this.SendPropertyChanged("MapURL");
					this.OnMapURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainCities", DbType="NVarChar(MAX)")]
		public string MainCities
		{
			get
			{
				return this._MainCities;
			}
			set
			{
				if ((this._MainCities != value))
				{
					this.OnMainCitiesChanging(value);
					this.SendPropertyChanging();
					this._MainCities = value;
					this.SendPropertyChanged("MainCities");
					this.OnMainCitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockExchanges", DbType="NVarChar(MAX)")]
		public string StockExchanges
		{
			get
			{
				return this._StockExchanges;
			}
			set
			{
				if ((this._StockExchanges != value))
				{
					this.OnStockExchangesChanging(value);
					this.SendPropertyChanging();
					this._StockExchanges = value;
					this.SendPropertyChanged("StockExchanges");
					this.OnStockExchangesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorIndustries", DbType="NVarChar(MAX)")]
		public string MajorIndustries
		{
			get
			{
				return this._MajorIndustries;
			}
			set
			{
				if ((this._MajorIndustries != value))
				{
					this.OnMajorIndustriesChanging(value);
					this.SendPropertyChanging();
					this._MajorIndustries = value;
					this.SendPropertyChanged("MajorIndustries");
					this.OnMajorIndustriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FusionMapsID", DbType="NVarChar(5)")]
		public string FusionMapsID
		{
			get
			{
				return this._FusionMapsID;
			}
			set
			{
				if ((this._FusionMapsID != value))
				{
					this.OnFusionMapsIDChanging(value);
					this.SendPropertyChanging();
					this._FusionMapsID = value;
					this.SendPropertyChanged("FusionMapsID");
					this.OnFusionMapsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iso2code", DbType="Char(2)")]
		public string iso2code
		{
			get
			{
				return this._iso2code;
			}
			set
			{
				if ((this._iso2code != value))
				{
					this.Oniso2codeChanging(value);
					this.SendPropertyChanging();
					this._iso2code = value;
					this.SendPropertyChanged("iso2code");
					this.Oniso2codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastReviewed", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastReviewed
		{
			get
			{
				return this._LastReviewed;
			}
			set
			{
				if ((this._LastReviewed != value))
				{
					this.OnLastReviewedChanging(value);
					this.SendPropertyChanging();
					this._LastReviewed = value;
					this.SendPropertyChanged("LastReviewed");
					this.OnLastReviewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Country", Storage="_Tag", ThisKey="TagID", OtherKey="TagID", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._TagID = value.TagID;
					}
					else
					{
						this._TagID = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIBS_Fields")]
	public partial class DIBS_Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FieldID;
		
		private string _Name;
		
		private string _Description;
		
		private int _UnitID;
		
		private int _CategoryID;
		
		private int _SourceID;
		
		private bool _FieldNumeric;
		
		private bool _FieldText;
		
		private System.Nullable<System.DateTime> _DateFieldUpdated;
		
		private System.Nullable<System.DateTime> _DateDataUpdated;
		
		private EntitySet<DIBS_FieldsAvailability> _DIBS_FieldsAvailabilities;
		
		private EntityRef<DIBS_Category> _DIBS_Category;
		
		private EntityRef<DIBS_Source> _DIBS_Source;
		
		private EntityRef<DIBS_Unit> _DIBS_Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIDChanging(string value);
    partial void OnFieldIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnSourceIDChanging(int value);
    partial void OnSourceIDChanged();
    partial void OnFieldNumericChanging(bool value);
    partial void OnFieldNumericChanged();
    partial void OnFieldTextChanging(bool value);
    partial void OnFieldTextChanged();
    partial void OnDateFieldUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFieldUpdatedChanged();
    partial void OnDateDataUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDataUpdatedChanged();
    #endregion
		
		public DIBS_Field()
		{
			this._DIBS_FieldsAvailabilities = new EntitySet<DIBS_FieldsAvailability>(new Action<DIBS_FieldsAvailability>(this.attach_DIBS_FieldsAvailabilities), new Action<DIBS_FieldsAvailability>(this.detach_DIBS_FieldsAvailabilities));
			this._DIBS_Category = default(EntityRef<DIBS_Category>);
			this._DIBS_Source = default(EntityRef<DIBS_Source>);
			this._DIBS_Unit = default(EntityRef<DIBS_Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL")]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._DIBS_Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._DIBS_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceID", DbType="Int NOT NULL")]
		public int SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					if (this._DIBS_Source.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldNumeric", DbType="Bit NOT NULL")]
		public bool FieldNumeric
		{
			get
			{
				return this._FieldNumeric;
			}
			set
			{
				if ((this._FieldNumeric != value))
				{
					this.OnFieldNumericChanging(value);
					this.SendPropertyChanging();
					this._FieldNumeric = value;
					this.SendPropertyChanged("FieldNumeric");
					this.OnFieldNumericChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldText", DbType="Bit NOT NULL")]
		public bool FieldText
		{
			get
			{
				return this._FieldText;
			}
			set
			{
				if ((this._FieldText != value))
				{
					this.OnFieldTextChanging(value);
					this.SendPropertyChanging();
					this._FieldText = value;
					this.SendPropertyChanged("FieldText");
					this.OnFieldTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFieldUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateFieldUpdated
		{
			get
			{
				return this._DateFieldUpdated;
			}
			set
			{
				if ((this._DateFieldUpdated != value))
				{
					this.OnDateFieldUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateFieldUpdated = value;
					this.SendPropertyChanged("DateFieldUpdated");
					this.OnDateFieldUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDataUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDataUpdated
		{
			get
			{
				return this._DateDataUpdated;
			}
			set
			{
				if ((this._DateDataUpdated != value))
				{
					this.OnDateDataUpdatedChanging(value);
					this.SendPropertyChanging();
					this._DateDataUpdated = value;
					this.SendPropertyChanged("DateDataUpdated");
					this.OnDateDataUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Field_DIBS_FieldsAvailability", Storage="_DIBS_FieldsAvailabilities", ThisKey="FieldID", OtherKey="FieldID")]
		public EntitySet<DIBS_FieldsAvailability> DIBS_FieldsAvailabilities
		{
			get
			{
				return this._DIBS_FieldsAvailabilities;
			}
			set
			{
				this._DIBS_FieldsAvailabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Category_DIBS_Field", Storage="_DIBS_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public DIBS_Category DIBS_Category
		{
			get
			{
				return this._DIBS_Category.Entity;
			}
			set
			{
				DIBS_Category previousValue = this._DIBS_Category.Entity;
				if (((previousValue != value) 
							|| (this._DIBS_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DIBS_Category.Entity = null;
						previousValue.DIBS_Fields.Remove(this);
					}
					this._DIBS_Category.Entity = value;
					if ((value != null))
					{
						value.DIBS_Fields.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("DIBS_Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Source_DIBS_Field", Storage="_DIBS_Source", ThisKey="SourceID", OtherKey="SourceID", IsForeignKey=true)]
		public DIBS_Source DIBS_Source
		{
			get
			{
				return this._DIBS_Source.Entity;
			}
			set
			{
				DIBS_Source previousValue = this._DIBS_Source.Entity;
				if (((previousValue != value) 
							|| (this._DIBS_Source.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DIBS_Source.Entity = null;
						previousValue.DIBS_Fields.Remove(this);
					}
					this._DIBS_Source.Entity = value;
					if ((value != null))
					{
						value.DIBS_Fields.Add(this);
						this._SourceID = value.SourceID;
					}
					else
					{
						this._SourceID = default(int);
					}
					this.SendPropertyChanged("DIBS_Source");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Unit_DIBS_Field", Storage="_DIBS_Unit", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
		public DIBS_Unit DIBS_Unit
		{
			get
			{
				return this._DIBS_Unit.Entity;
			}
			set
			{
				DIBS_Unit previousValue = this._DIBS_Unit.Entity;
				if (((previousValue != value) 
							|| (this._DIBS_Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DIBS_Unit.Entity = null;
						previousValue.DIBS_Fields.Remove(this);
					}
					this._DIBS_Unit.Entity = value;
					if ((value != null))
					{
						value.DIBS_Fields.Add(this);
						this._UnitID = value.UnitID;
					}
					else
					{
						this._UnitID = default(int);
					}
					this.SendPropertyChanged("DIBS_Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DIBS_FieldsAvailabilities(DIBS_FieldsAvailability entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Field = this;
		}
		
		private void detach_DIBS_FieldsAvailabilities(DIBS_FieldsAvailability entity)
		{
			this.SendPropertyChanging();
			entity.DIBS_Field = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIBS_FieldsAvailabilities")]
	public partial class DIBS_FieldsAvailability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FieldID;
		
		private int _AvailabilityID;
		
		private EntityRef<DIBS_Availability> _DIBS_Availability;
		
		private EntityRef<DIBS_Field> _DIBS_Field;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIDChanging(string value);
    partial void OnFieldIDChanged();
    partial void OnAvailabilityIDChanging(int value);
    partial void OnAvailabilityIDChanged();
    #endregion
		
		public DIBS_FieldsAvailability()
		{
			this._DIBS_Availability = default(EntityRef<DIBS_Availability>);
			this._DIBS_Field = default(EntityRef<DIBS_Field>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._DIBS_Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailabilityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AvailabilityID
		{
			get
			{
				return this._AvailabilityID;
			}
			set
			{
				if ((this._AvailabilityID != value))
				{
					if (this._DIBS_Availability.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvailabilityIDChanging(value);
					this.SendPropertyChanging();
					this._AvailabilityID = value;
					this.SendPropertyChanged("AvailabilityID");
					this.OnAvailabilityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Availability_DIBS_FieldsAvailability", Storage="_DIBS_Availability", ThisKey="AvailabilityID", OtherKey="AvailabilityID", IsForeignKey=true)]
		public DIBS_Availability DIBS_Availability
		{
			get
			{
				return this._DIBS_Availability.Entity;
			}
			set
			{
				DIBS_Availability previousValue = this._DIBS_Availability.Entity;
				if (((previousValue != value) 
							|| (this._DIBS_Availability.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DIBS_Availability.Entity = null;
						previousValue.DIBS_FieldsAvailabilities.Remove(this);
					}
					this._DIBS_Availability.Entity = value;
					if ((value != null))
					{
						value.DIBS_FieldsAvailabilities.Add(this);
						this._AvailabilityID = value.AvailabilityID;
					}
					else
					{
						this._AvailabilityID = default(int);
					}
					this.SendPropertyChanged("DIBS_Availability");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DIBS_Field_DIBS_FieldsAvailability", Storage="_DIBS_Field", ThisKey="FieldID", OtherKey="FieldID", IsForeignKey=true)]
		public DIBS_Field DIBS_Field
		{
			get
			{
				return this._DIBS_Field.Entity;
			}
			set
			{
				DIBS_Field previousValue = this._DIBS_Field.Entity;
				if (((previousValue != value) 
							|| (this._DIBS_Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DIBS_Field.Entity = null;
						previousValue.DIBS_FieldsAvailabilities.Remove(this);
					}
					this._DIBS_Field.Entity = value;
					if ((value != null))
					{
						value.DIBS_FieldsAvailabilities.Add(this);
						this._FieldID = value.FieldID;
					}
					else
					{
						this._FieldID = default(string);
					}
					this.SendPropertyChanged("DIBS_Field");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIBS_Data")]
	public partial class DIBS_Data
	{
		
		private decimal _Value;
		
		private string _Text;
		
		private int _Year;
		
		private string _FieldID;
		
		private int _CountryID;
		
		private System.DateTime _DateAdded;
		
		public DIBS_Data()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(28,8) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(4000)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this._Text = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					this._FieldID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this._CountryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this._DateAdded = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
